[{"/Users/petrkrivosekov/my-best-album/my-best-album/pages/[categroy]/[post_id]/index.tsx":"1","/Users/petrkrivosekov/my-best-album/my-best-album/pages/_app.tsx":"2","/Users/petrkrivosekov/my-best-album/my-best-album/pages/creating/index.tsx":"3","/Users/petrkrivosekov/my-best-album/my-best-album/pages/faq/index.tsx":"4","/Users/petrkrivosekov/my-best-album/my-best-album/pages/index.tsx":"5","/Users/petrkrivosekov/my-best-album/my-best-album/components/Header/index.tsx":"6","/Users/petrkrivosekov/my-best-album/my-best-album/components/Header/styled.ts":"7","/Users/petrkrivosekov/my-best-album/my-best-album/components/MainPage/MainPage.tsx":"8","/Users/petrkrivosekov/my-best-album/my-best-album/components/MainPage/SingleCard/SingleCard.tsx":"9","/Users/petrkrivosekov/my-best-album/my-best-album/components/MainPage/SingleCard/styled.ts":"10","/Users/petrkrivosekov/my-best-album/my-best-album/components/MainPage/styled.ts":"11","/Users/petrkrivosekov/my-best-album/my-best-album/components/SinglePost/styled.ts":"12"},{"size":2790,"mtime":1660860745963,"results":"13","hashOfConfig":"14"},{"size":1104,"mtime":1660864679397,"results":"15","hashOfConfig":"14"},{"size":7225,"mtime":1660865537920,"results":"16","hashOfConfig":"14"},{"size":7393,"mtime":1660860745964,"results":"17","hashOfConfig":"14"},{"size":640,"mtime":1660860745964,"results":"18","hashOfConfig":"14"},{"size":1635,"mtime":1660865653120,"results":"19","hashOfConfig":"14"},{"size":1838,"mtime":1660865767137,"results":"20","hashOfConfig":"14"},{"size":2154,"mtime":1660865429845,"results":"21","hashOfConfig":"14"},{"size":2994,"mtime":1660864816907,"results":"22","hashOfConfig":"14"},{"size":1267,"mtime":1660860739793,"results":"23","hashOfConfig":"14"},{"size":1083,"mtime":1660865429856,"results":"24","hashOfConfig":"14"},{"size":5525,"mtime":1660860739793,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10udu8f",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/petrkrivosekov/my-best-album/my-best-album/pages/[categroy]/[post_id]/index.tsx",[],["63"],"/Users/petrkrivosekov/my-best-album/my-best-album/pages/_app.tsx",[],[],"/Users/petrkrivosekov/my-best-album/my-best-album/pages/creating/index.tsx",["64","65"],[],"import { MainSinglePost } from '../../components/SinglePost/styled';\nimport Delete from '../../public/images/close.svg'\nimport React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { NextPage } from 'next';\n\nenum TypeInput {\n    shortDesc = 0,\n    title = 1,\n    description = 2,\n    selecte = 3,\n}\n\nconst Creating: NextPage = ({ categoris }: any) => {\n    const router = useRouter()\n    const [images, setImages] = React.useState([\"\", \"\", \"\", \"\"]);\n    const [publish, setPublish] = React.useState(false)\n    const [title, setTitle] = React.useState(\"\")\n    const [shortDesc, setShortDesc] = React.useState(\"\")\n    const [desctiption, setDescription] = React.useState(\"\")\n    const [select, setSelect] = React.useState(categoris[0])\n\n    useEffect(() => {\n        if (title !== \"\" && shortDesc !== \"\" && desctiption !== \"\") {\n            setPublish(true);\n        }\n    }, [title, shortDesc, desctiption])\n\n    useEffect(() => {\n        let i = 0\n        images.forEach((item) => item !== null && ++i)\n        if (i !== 0 && title !== \"\") setPublish(true)\n        if (i === 0 && title === \"\" && shortDesc === \"\" && desctiption === \"\") {\n            setPublish(false)\n        }\n    }, [images, title])\n\n    const handleChangeFile = (event: any, index: number) => {\n        const file = event.target.files;\n        if (typeof file === 'object') {\n            const arr = images;\n            arr[index] = file[0]\n            setImages([...arr])\n        }\n    }\n\n    const hadnleDeleteImg = (index: number) => {\n        const arr = images\n        arr[index] = \"\"\n        setImages([...arr])\n    }\n\n    const renderImg = (imgs: Array<any>) => {\n        return imgs.map((img, i) => {\n            if (img === \"\") {\n                return (\n                    <label key={`img:ip${i}`} htmlFor={`input:img${i}`}>\n                        <div key={`img:ip${i}`} className=\"add-img-wrapper\">\n                            <div className='add-img-gird'>\n                                <span>+</span>\n                                <input\n                                    type={\"file\"}\n                                    accept=\"image/*\"\n                                    id={`input:img${i}`}\n                                    onChange={(event) => handleChangeFile(event, i)}\n                                />\n                            </div>\n                        </div>\n                    </label>\n                )\n            }\n\n            const url = img !== String ? URL.createObjectURL(img) : ''\n            return (\n                <div key={`img:ip${i}`} className=\"add-img-wrapper\">\n                    <span onClick={() => hadnleDeleteImg(i)}><Delete /></span>\n                    <img src={url} alt=\"\" />\n                </div>\n            )\n        })\n    }\n\n    const handleChagneText = (event: any, type: TypeInput) => {\n        const value = event.target.value;\n\n        switch (type) {\n            case 0:\n                setShortDesc(value)\n                break;\n            case 1:\n                setTitle(value)\n                break;\n            case 2:\n                setDescription(value)\n                break;\n            case 3:\n                setTitle(\"\")\n                setSelect(value)\n                break;\n        }\n    }\n\n    const handlePublishPost = async () => {\n        const imgs: any = []\n        images.forEach((item) => {\n            const url = typeof item !== 'string' ? URL.createObjectURL(item) : null\n            if (url !== null) {\n                imgs.push(url)\n            }\n        })\n\n        const data = select === categoris[0] ? (\n            JSON.stringify({\n                categoryName: select,\n                post: {\n                    id: Date.now(),\n                    name: title,\n                    imgs: imgs,\n                }\n            })\n        ) : (\n            JSON.stringify({\n                categoryName: select,\n                post: {\n                    id: Date.now(),\n                    name: title,\n                    imgs: imgs,\n                    description: desctiption,\n                    caption: shortDesc\n                }\n            })\n        )\n\n        const res = await fetch(`http://localhost:4000/albums/create`, {\n            mode: 'cors',\n            method: \"post\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: data\n        })\n\n        const { status } = await res.json()\n        if (status === \"ok\") {\n            router.push('/')\n        }\n    }\n\n    return (\n        <MainSinglePost category={\"Images\"}>\n            <div id=\"wrapper-container-post\">\n                <select value={select} onChange={(e) => handleChagneText(e, TypeInput.selecte)}>\n                    {categoris.map((i: any) => {\n                        return <option key={`${i}${Date.now()}`} value={i}>{i}</option>\n                    })}\n                </select>\n                <>\n                    {select === categoris[0] &&\n                        (<input\n                            type=\"text\"\n                            value={title}\n                            id=\"title-inp\"\n                            placeholder={\"Title\"}\n                            onChange={(e) => handleChagneText(e, TypeInput.title)}\n                        />)\n                    }\n                    <p>Images</p>\n                    <div id=\"grid-img\">\n                        {renderImg(images)}\n                    </div>\n                </>\n                {select !== categoris[0] && (\n                    <div id=\"text-single-post\">\n                        <input\n                            type=\"text\"\n                            value={shortDesc}\n                            placeholder={\"Short Description\"}\n                            onChange={(e) => handleChagneText(e, TypeInput.shortDesc)}\n                            id=\"short-desc-inp\"\n                        />\n                        <input\n                            type=\"text\"\n                            value={title}\n                            id=\"title-inp\"\n                            placeholder={\"Title\"}\n                            onChange={(e) => handleChagneText(e, TypeInput.title)}\n                        />\n                        <textarea\n                            id=\"desc-inp\"\n                            value={desctiption}\n                            placeholder={\"Description...\"}\n                            onChange={(e) => handleChagneText(e, TypeInput.description)}\n                        ></textarea>\n                    </div>\n                )}\n                {publish && <button onClick={handlePublishPost}>Publish</button>}\n            </div>\n        </MainSinglePost>\n    )\n}\n\nexport const getServerSideProps = async () => {\n    const res = await fetch(`http://localhost:4000/albums/categoris`, {\n        mode: 'cors',\n        method: \"get\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n    })\n\n    const categoris = await res.json()\n    if (categoris.data.length === 0) return { notFound: true };\n\n    return {\n        props: {\n            categoris: categoris.data,\n        }\n    }\n};\nexport default Creating;\n","/Users/petrkrivosekov/my-best-album/my-best-album/pages/faq/index.tsx",[],[],"/Users/petrkrivosekov/my-best-album/my-best-album/pages/index.tsx",[],[],"/Users/petrkrivosekov/my-best-album/my-best-album/components/Header/index.tsx",[],["66"],"/Users/petrkrivosekov/my-best-album/my-best-album/components/Header/styled.ts",[],[],"/Users/petrkrivosekov/my-best-album/my-best-album/components/MainPage/MainPage.tsx",[],[],"/Users/petrkrivosekov/my-best-album/my-best-album/components/MainPage/SingleCard/SingleCard.tsx",[],["67"],"/Users/petrkrivosekov/my-best-album/my-best-album/components/MainPage/SingleCard/styled.ts",[],[],"/Users/petrkrivosekov/my-best-album/my-best-album/components/MainPage/styled.ts",[],[],"/Users/petrkrivosekov/my-best-album/my-best-album/components/SinglePost/styled.ts",[],[],{"ruleId":"68","severity":1,"message":"69","line":51,"column":37,"nodeType":"70","endLine":51,"endColumn":99,"suppressions":"71"},{"ruleId":"72","severity":1,"message":"73","line":36,"column":8,"nodeType":"74","endLine":36,"endColumn":23,"suggestions":"75"},{"ruleId":"68","severity":1,"message":"69","line":77,"column":21,"nodeType":"70","endLine":77,"endColumn":45},{"ruleId":"68","severity":1,"message":"69","line":27,"column":21,"nodeType":"70","endLine":27,"endColumn":77,"suppressions":"76"},{"ruleId":"68","severity":1,"message":"69","line":53,"column":53,"nodeType":"70","endLine":57,"endColumn":55,"suppressions":"77"},"@next/next/no-img-element","Do not use `<img>` element. Use `<Image />` from `next/image` instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement",["78"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'desctiption' and 'shortDesc'. Either include them or remove the dependency array.","ArrayExpression",["79"],["80"],["81"],{"kind":"82","justification":"83"},{"desc":"84","fix":"85"},{"kind":"82","justification":"83"},{"kind":"82","justification":"83"},"directive","","Update the dependencies array to be: [desctiption, images, shortDesc, title]",{"range":"86","text":"87"},[1214,1229],"[desctiption, images, shortDesc, title]"]